<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <property name = "LOG_PATH" value="./logs"/>

    <!-- Appenders -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] [%thread] %logger %msg%n</pattern>
        </encoder>
    </appender>
<!--
    <appender name = "INFO_LOG" class = "ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <file>${LOG_PATH}/info.log</file>
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy">
            <fileNamePattern>${LOG_PATH}/info_${type}.%d{yyyy-MM-dd}.gz}</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH-mm-ss.SSS}] [%-5level] [%thread] %logger %msg%n</pattern>
        </encoder>
    </appender>
    저장할건 아니여서 걍 지우고 테스트 했습니당.
    -->

    <!-- Appender 영역 :
        Appender 영역은 로그의 형태를 설정하고, 어떤 방법으로 출력할지를 결정.

        여러가지 구현체를 상속받고 있음
        ConsoleAppender : 콘솔에 로그 출력
        FileAppender : 파일에 로그저장
        RollingFileAppender : 여려개의 파일을 순회하면서 로그를 저장
        DBAppender : 데이터 베이스에 로그를 저장 -->

    <!-- filter :
        appender 로 어던 방식으로 저장할지 지정했다면, filter 요소로 각 Appender가 어떤 레벨로
            로그를 기록하는지 지정.
            -->
    <!-- Encoder 영역 :
        로그의 표현형식을 패턴(pattern)으로 정의
        %Logger{length} : 로거의 이름
        %-5level : 로그레벨, -5는 출력 고정폭 값
        %msg(%message) 로그 메세지

        %d : 로그 기록 시간
        %p : 로길 레벨
        %F : 로깅이 발생한 애플리케이션 파일명
        %M : 로깅이 발생한 메서드 이름
        %I : 로깅이 발생한 호출지의 정보
        %thread : 현제 스래드명
        %t : 로깅이 발생한 스래드 명
        %c : 로깅이 발생한 카테고리
        %C : 로깅이 발생한 클래스명
        %m : 로그 메세지
        %n : 줄바꿈
        %r : 애플리케시연 실행후 로깅이 발생한 시점 까지의 시간 -> Test할때 Good
        %L : 로깅이 발생한 지점의 라인수
        -->




    <!--TRACE> DEBUG > INFO > WARN > ERROR > OFF -->
    <!--Root Logger-->
    <root level ="INFO">
        <appender-ref ref = "console"/>
        <!--
        <appender-ref ref = "INFO_LOG"/>
        -->
    </root>
</configuration>
<!-- Root 영역 :
        설정 파일에서 정의된 Appender 을 활용 하려면 Root 영역에서
            Appender 을 참조해서 로깅레벨을 설정 -->

<!-- Use logger -->
<!--
    <logger name ="com.springboot.api.controller" level="DEBUG" additivity ="false">
        <appender-ref ref="console"/>
        <appender-ref ref="INFO_LOG"/>
    </logger>

뭐 이런식으로 특정한 패키지 반위로 로깅이 적용될 범위를 지정하고 level로 레벨을 지정
additivity로 지정한 패키지 범위에 하위패키지를 포함할지 여부를 결정.(default = true)-->

